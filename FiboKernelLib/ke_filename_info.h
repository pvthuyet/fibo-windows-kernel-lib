/*************************************************************************
*
* FIBO Library - Version 1.0 - September 1st, 2020
* @author thuyetvp@gmail.com
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (the "Software") to use, reproduce, display, distribute,
* execute, and transmit the Software, and to prepare derivative works of the
* Software, and to permit third-parties to whom the Software is furnished to
* do so, all subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/

#pragma once

#include <fltKernel.h>

namespace fibo::kernel
{
	enum class FileNameOptions
	{
		Normalized	= FLT_FILE_NAME_NORMALIZED,
		Opened		= FLT_FILE_NAME_OPENED,
		Short		= FLT_FILE_NAME_SHORT,

		QueryDefault		= FLT_FILE_NAME_QUERY_DEFAULT,
		QueryCacheOnly		= FLT_FILE_NAME_QUERY_CACHE_ONLY,
		QueryFileSystemOnly = FLT_FILE_NAME_QUERY_FILESYSTEM_ONLY,

		RequestFromCurrentProvider	= FLT_FILE_NAME_REQUEST_FROM_CURRENT_PROVIDER,
		DoNotCache					= FLT_FILE_NAME_DO_NOT_CACHE,
		AllowQueryOnReparse			= FLT_FILE_NAME_ALLOW_QUERY_ON_REPARSE
	};
	DEFINE_ENUM_FLAG_OPERATORS(FileNameOptions);

	class FilterFileNameInfo
	{
	public:
		FilterFileNameInfo(PFLT_CALLBACK_DATA data, 
			FileNameOptions options = FileNameOptions::QueryDefault | FileNameOptions::Normalized);
		~FilterFileNameInfo();

		operator bool() const;
		operator PFLT_FILE_NAME_INFORMATION() const;
		PFLT_FILE_NAME_INFORMATION operator->();

		PFLT_FILE_NAME_INFORMATION get() const;
		NTSTATUS parse();

	private:
		PFLT_FILE_NAME_INFORMATION mInfo{ nullptr };
	};
}
